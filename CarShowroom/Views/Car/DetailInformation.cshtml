@model IEnumerable<CarShowroom.Entities.Car>

@{
    ViewData["Title"] = "DetailInformation";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    body {
        background-color: rgba(45, 89, 134, 0.8);
    }
	.containerCars{
    background-color: white;
    border-radius: 20px;
    padding: 20px;
	}
    .containerTD{
    background-color: white;
    border-radius: 20px;
    padding: 20px;
	}
    .containerOrder{
    background-color: white;
    border-radius: 20px;
    padding: 20px;
	}
	.btn {
  display: inline-block;
    padding: 10px 20px;
    background-color:  rgba(45, 89, 134, 0.9);
    color: white;
    text-decoration: none;
    border-radius: 30px;
    transition: background-color 0.3s ease;
}
.btn:hover {
    background-color:rgb(198, 217, 236);
    color: #404040;
}
.button-container {
    display: flex;
    gap: 10px;
}

</style>
<body>
    <br>
<div class="containerCars">
    <h2 style="text-align: center">Детайлна информация</h2>
<!-- First grid with cars -->
<table class="table table-striped">
    <thead class="thead-dark">
        <tr>
            <th>Модел</th>
            <th>Мощност (к.с.)</th>
            <th>Вид гориво</th>
            <th>Брой места</th>
            <th>Купе</th>
            <th>Цена</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var car in Model)
        {
            <tr id="@car.CarId" class="carRow">
                <td>@Html.DisplayFor(modelItem => car.Model)</td>
                <td>@Html.DisplayFor(modelItem => car.Hp)</td>
                <td>@Html.DisplayFor(modelItem => car.TypeFuel)</td>
                <td>@Html.DisplayFor(modelItem => car.NumberOfSeats)</td>
                <td>@Html.DisplayFor(modelItem => car.TypeCompartment)</td>
                <td>@Html.DisplayFor(modelItem => car.OriginalPrice)</td>
                <td></td>
            </tr>
        }
    </tbody>
</table>
</div>
<br>
<div class="containerTD">
<h3> TestDrives </h3>
        <table class="table" id="testDriveGrid">
            <thead>
                <tr>
                    <th>ИД на клиент</th>
                    <th>Дата на тест драйв</th>
                    <th>Дата на заявка</th>
                    
                    <th></th>
                </tr>
            </thead>
            <tbody>
            @foreach (var car in Model) {
                @foreach (var testDrive in car.TestDrives) {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => testDrive.CustomerId)</td>
                        <td>@Html.DisplayFor(modelItem => testDrive.DateOfTestDrive)</td>
                        <td>@Html.DisplayFor(modelItem => testDrive.DateOfQuery)</td>
                        
                        <td></td>
                    </tr>
                }
            }
            </tbody>
        </table>
        </div>
        <br>
        <div class="containerOrder">
        <h3> Orders </h3>
        <table class="table" id="ordersGrid">
            <thead>
                <tr>
                    <th>ИД на поръчка</th>
                    <th>Обща сума</th>
                    <th>ИД на клиент</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
            @foreach (var car in Model) {
                @foreach (var order in car.Orders) {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => order.OrderId)</td>
                        <td>@Html.DisplayFor(modelItem => order.TotalSum)</td>
                        <td>@Html.DisplayFor(modelItem => order.CustomerId)</td>
                        <td></td>
                    </tr>
                }
            }
            </tbody>
        </table>
        </div>
        <button id="exportButton" class="btn">Експорт в XML</button>

        <button id="exportButtonExcel" class="btn">Експорт в Excel</button>

        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script>
            $(document).ready(function () {
                // Capture click event on car row
                $("tr.carRow").click(function () {
                    var carId = $(this).attr('id'); // Get the car ID from the clicked row

                    // Clear existing test drive rows
                    $("#testDriveGrid tbody").empty();

                    // Fetch test drives for the selected car
                    $.ajax({
                        url: "/Car/GetTestDrives",
                        type: "GET",
                        data: { carId: carId },
                        dataType: "json",
                        success: function (result) {
                            // Iterate through the test drives and construct HTML markup for the rows
                            $.each(result, function (index, testDrive) {
                        var row = $("<tr>");
                        row.append($("<td>").text(testDrive.customerId));
                        row.append($("<td>").text(testDrive.dateOfTestDrive));
                        row.append($("<td>").text(testDrive.dateOfQuery));
                        row.append($("<td>"));
                        $("#testDriveGrid tbody").append(row);
                    });

                            // Update the second grid with the constructed rows
                            $("#testDriveGrid tbody").html(rows);
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                });
            });
            $("#exportButton").click(function () {
            // Trigger the export action
            window.location.href = "/Car/ExportToXml";
        });
            $(document).ready(function () {
                // Capture click event on car row
                $("tr.carRow").click(function () {
                    var carId = $(this).attr('id'); // Get the car ID from the clicked row

                    // Clear existing test drive rows
                    $("#ordersGrid tbody").empty();

                    // Fetch test drives for the selected car
                    $.ajax({
                        url: "/Car/GetOrders",
                        type: "GET",
                        data: { carId: carId },
                        dataType: "json",
                        success: function (result) {
                            // Iterate through the test drives and construct HTML markup for the rows
                            $.each(result, function (index, order) {
                        var row = $("<tr>");
                        row.append($("<td>").text(order.orderId));
                        row.append($("<td>").text(order.totalSum));
                        row.append($("<td>").text(order.customerId));
                        row.append($("<td>"));
                        $("#ordersGrid tbody").append(row);
                    });

                            // Update the second grid with the constructed rows
                            $("#ordersGrid tbody").html(rows);
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                });
            });


            $(document).ready(function() {
  $("#exportButton").click(function() {
    // Call a function to export the data to XML
    exportToXML();
  });
});
function exportToXML() {
  // Create a new XML document
  var xmlDoc = document.implementation.createDocument(null, "orders");

  // Get the table rows in the order table
  var rows = $("#orderReportTable tbody tr");

  // Iterate through the rows and extract the data
  rows.each(function(index) {
    var row = $(this);
    var order = xmlDoc.createElement("order");

    // Extract the data from the row
    var orderId = row.find("td:nth-child(1)").text();
    var originalPrice = row.find("td:nth-child(2)").text();
    var totalSum = row.find("td:nth-child(3)").text();
    var quantity = row.find("td:nth-child(4)").text();
    var carId = row.find("td:nth-child(5)").text();
    var customerId = row.find("td:nth-child(6)").text();

    // Create XML elements and append them to the order element
    var orderIdElement = xmlDoc.createElement("orderId");
    orderIdElement.textContent = orderId;
    order.appendChild(orderIdElement);

    var originalPriceElement = xmlDoc.createElement("originalPrice");
    originalPriceElement.textContent = originalPrice;
    order.appendChild(originalPriceElement);

    var totalSumElement = xmlDoc.createElement("totalSum");
    totalSumElement.textContent = totalSum;
    order.appendChild(totalSumElement);

    var quantityElement = xmlDoc.createElement("quantity");
    quantityElement.textContent = quantity;
    order.appendChild(quantityElement);

    var carIdElement = xmlDoc.createElement("carId");
    carIdElement.textContent = carId;
    order.appendChild(carIdElement);

    var customerIdElement = xmlDoc.createElement("customerId");
    customerIdElement.textContent = customerId;
    order.appendChild(customerIdElement);

    // Append the order element to the root of the XML document
    xmlDoc.documentElement.appendChild(order);
  });

  // Serialize the XML document to a string
  var xmlString = new XMLSerializer().serializeToString(xmlDoc);

  // Log the XML string (you can replace this with your desired export logic)
  console.log(xmlString);
}
$(document).ready(function() {
  $("#exportButtonExcel").click(function() {
    // Call a function to export the data to Excel
    exportToExcel();
  });
});

function exportToExcel() {
  // Trigger the export action by redirecting to the server endpoint
  window.location.href = "/Car/ExportToExcel";
}
        </script>
        </body>